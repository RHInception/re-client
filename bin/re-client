#!/usr/bin/env python
import readline
from reclient import ReClient
import os
import argparse


conf_file = os.path.expanduser('~/.rerest.conf')

def cmds():
    print """
1) Get a all playbooks for a project
2) Get a single playbook for a project
3) Update a playbook
4) Delete a playbook
5) Create a new playbook"""

def repl(args):
    with open(conf_file, 'r') as config:
        baseurl = config.read()

    reclient = ReClient(baseurl)
    while True:
        cmds()
        try:
            action = int(raw_input("command>> "))
        except KeyboardInterrupt, ke:
            raise ke
        except:
            continue

        if action == 1:
            if args.project is None:
                project = raw_input("Project: ")
            else:
                project = args.project
            reclient.get_all_playbooks(project)
        elif action == 2:
            if args.project is None:
                project = raw_input("Project: ")
            else:
                project = args.project
            if args.id is None:
                pb_id = raw_input("Playbook ID: ")
            else:
                pb_id = args.id
            reclient.view_file(project, pb_id)
        elif action == 3:
            if args.project is None:
                project = raw_input("Project: ")
            else:
                project = args.project
            if args.id is None:
                pb_id = raw_input("Playbook ID: ")
            else:
                pb_id = args.id
            reclient.edit_playbook(project, pb_id)


if __name__ == '__main__':
    if not os.path.exists(conf_file):
        print "Could not load base rerest url from %s" % conf_file
        print "Enter the base url (http://.......:PORT) for your rerest endpoint"
        print "This will be saved in %s for reuse later" % conf_file
        baseurl = raw_input("Base Url: ")

        with open(conf_file, 'w') as _config:
            _config.write(baseurl)

    parser = argparse.ArgumentParser(description='Release Engine Client Utility')
    parser.add_argument('-p', '--project', required=False,
                        default=None, help='Set default project')
    parser.add_argument('-i', '--id', required=False,
                        default=None, help='Set default playbook ID')
    args = parser.parse_args()

    repl(args)
